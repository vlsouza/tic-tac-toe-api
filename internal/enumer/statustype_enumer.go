// Code generated by "enumer -json -text -sql -type StatusType -trimprefix Status -transform snake-upper"; DO NOT EDIT.

package enumer

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _StatusTypeName = "PENDINGPLAYERRUNNINGPLAYER1WONPLAYER2WONDRAW"

var _StatusTypeIndex = [...]uint8{0, 13, 20, 30, 40, 44}

const _StatusTypeLowerName = "pendingplayerrunningplayer1wonplayer2wondraw"

func (i StatusType) String() string {
	if i < 0 || i >= StatusType(len(_StatusTypeIndex)-1) {
		return fmt.Sprintf("StatusType(%d)", i)
	}
	return _StatusTypeName[_StatusTypeIndex[i]:_StatusTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusTypeNoOp() {
	var x [1]struct{}
	_ = x[PENDINGPLAYER-(0)]
	_ = x[RUNNING-(1)]
	_ = x[PLAYER1WON-(2)]
	_ = x[PLAYER2WON-(3)]
	_ = x[DRAW-(4)]
}

var _StatusTypeValues = []StatusType{PENDINGPLAYER, RUNNING, PLAYER1WON, PLAYER2WON, DRAW}

var _StatusTypeNameToValueMap = map[string]StatusType{
	_StatusTypeName[0:13]:       PENDINGPLAYER,
	_StatusTypeLowerName[0:13]:  PENDINGPLAYER,
	_StatusTypeName[13:20]:      RUNNING,
	_StatusTypeLowerName[13:20]: RUNNING,
	_StatusTypeName[20:30]:      PLAYER1WON,
	_StatusTypeLowerName[20:30]: PLAYER1WON,
	_StatusTypeName[30:40]:      PLAYER2WON,
	_StatusTypeLowerName[30:40]: PLAYER2WON,
	_StatusTypeName[40:44]:      DRAW,
	_StatusTypeLowerName[40:44]: DRAW,
}

var _StatusTypeNames = []string{
	_StatusTypeName[0:13],
	_StatusTypeName[13:20],
	_StatusTypeName[20:30],
	_StatusTypeName[30:40],
	_StatusTypeName[40:44],
}

// StatusTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusTypeString(s string) (StatusType, error) {
	if val, ok := _StatusTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StatusType values", s)
}

// StatusTypeValues returns all values of the enum
func StatusTypeValues() []StatusType {
	return _StatusTypeValues
}

// StatusTypeStrings returns a slice of all String values of the enum
func StatusTypeStrings() []string {
	strs := make([]string, len(_StatusTypeNames))
	copy(strs, _StatusTypeNames)
	return strs
}

// IsAStatusType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StatusType) IsAStatusType() bool {
	for _, v := range _StatusTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StatusType
func (i StatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StatusType
func (i *StatusType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StatusType should be a string, got %s", data)
	}

	var err error
	*i, err = StatusTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for StatusType
func (i StatusType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for StatusType
func (i *StatusType) UnmarshalText(text []byte) error {
	var err error
	*i, err = StatusTypeString(string(text))
	return err
}

func (i StatusType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *StatusType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of StatusType: %[1]T(%[1]v)", value)
	}

	val, err := StatusTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
