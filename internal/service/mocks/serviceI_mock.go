// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/vinic/OneDrive/Documentos/github/tic-tac-toe-api/internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	service "main/internal/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockServiceI is a mock of ServiceI interface.
type MockServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIMockRecorder
}

// MockServiceIMockRecorder is the mock recorder for MockServiceI.
type MockServiceIMockRecorder struct {
	mock *MockServiceI
}

// NewMockServiceI creates a new mock instance.
func NewMockServiceI(ctrl *gomock.Controller) *MockServiceI {
	mock := &MockServiceI{ctrl: ctrl}
	mock.recorder = &MockServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceI) EXPECT() *MockServiceIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceI) Create(arg0 context.Context) (service.GetStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(service.GetStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceIMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceI)(nil).Create), arg0)
}

// GetListByStatus mocks base method.
func (m *MockServiceI) GetListByStatus(arg0 context.Context, arg1 string, arg2 int) ([]service.GetStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].([]service.GetStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStatus indicates an expected call of GetListByStatus.
func (mr *MockServiceIMockRecorder) GetListByStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStatus", reflect.TypeOf((*MockServiceI)(nil).GetListByStatus), arg0, arg1, arg2)
}

// GetStateByID mocks base method.
func (m *MockServiceI) GetStateByID(arg0 context.Context, arg1 uuid.UUID) (service.GetStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByID", arg0, arg1)
	ret0, _ := ret[0].(service.GetStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByID indicates an expected call of GetStateByID.
func (mr *MockServiceIMockRecorder) GetStateByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByID", reflect.TypeOf((*MockServiceI)(nil).GetStateByID), arg0, arg1)
}

// PlaceMove mocks base method.
func (m *MockServiceI) PlaceMove(arg0 context.Context, arg1 service.MoveRequest) (service.GetStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceMove", arg0, arg1)
	ret0, _ := ret[0].(service.GetStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceMove indicates an expected call of PlaceMove.
func (mr *MockServiceIMockRecorder) PlaceMove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceMove", reflect.TypeOf((*MockServiceI)(nil).PlaceMove), arg0, arg1)
}

// Start mocks base method.
func (m *MockServiceI) Start(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceIMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServiceI)(nil).Start), arg0, arg1)
}
